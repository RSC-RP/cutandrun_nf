//working directory for temporary/intermediate files produced in the workflow processes
workDir = "$HOME/temp" 

//global parameters
params {
    // general options
    sample_sheet                = "./test_data/test_sample_sheet.txt"
    //validate_params           = true // will add in the sample sheet validation
    queue                       = 'sceaq'
    project                     = '207f23bf-acb6-4835-8bfe-142436acb58c'
    outdir                      = "./results/"
    publish_dir_mode            = 'copy'
    enable_conda                = false

    //Bowtie params
    build_index                 = false
    fasta                       = './resources/mm39.fa'
    index                       = './resources/mm39_index'
    save_unaligned              = 'false'
    sort_bam                    = 'true'

    //trimgalore module specific parameters
    clip_r1                     = 0
    clip_r2                     = 0
    three_prime_clip_r1         = 0
    three_prime_clip_r2         = 0

    //SEACR params
    genome_file                 = './resources/mm39.chrom.sizes'
    threshold                   = 0

    //MACS2 params
    macs2_gsize                 = ''
}

// Computational resource allocation for the processes run in the workflow
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    errorStrategy = "retry"
    maxRetries = 2

    //Quality trimming process specific parameters
    withName: TRIMGALORE {
        cpus = 1
        memory = 8.GB
        ext.args = ''
    }

    //Bowtie2 aligner process specific parameters
    withName: BOWTIE2_ALIGN {
        cpus = { 2 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = '--local --very-sensitive-local --no-unal --no-mixed --no-discordant --phred33 -I 10 -X 700'
        ext.args2 = ''      //command line arguments for `samtools sort` if params.sort_bam == true
    }
    
    //Bowtie2 aligner process specific parameters
    withName: BOWTIE2_BUILD {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = '--verbose'
    }

    //conver bamtobed to bedgraph process specific resources
    withName: BAMTOBEDGRAPH {
        cpus = 1
        memory = 8.GB
        ext.args = ''
    }

    //SEACR peak calling resources
    withName: SEACR_CALLPEAK {
        cpus = 1
        memory = 16.GB
        ext.args = 'norm stringent'
    }
}

//Create profiles to easily switch between the different process executors and platforms.
profiles {
    //For running on an interactive session on cybertron with singularity module loaded
    local_singularity {
        process.executor = 'local'
        singularity.enabled = true
    }
    //For executing the jobs on the HPC cluster with singularity containers
    PBS_singularity {
        process.executor = 'pbspro' 
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        //process.clusterOptions = "-P \$(voucher project ${params.project})" //renders correctly in command.run script but scheduler won't accept it.
        process.beforeScript = 'module load singularity/3.9.9'
        singularity.enabled = true //need some logic here to switch to false if conda used
    }
    //For executing the jobs on the HPC cluster with conda environments. 
    PBS_conda {
        process.executor = 'pbspro' 
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        //can I set the enable_conda = true params here somehow??
    }
    //For running interactively on local macbook with docker installed. 
    local_docker {
        process.executor = 'local'
        docker.enabled = true
    }
}

//Configs for singularity containers on cybertron
singularity {
    autoMounts = true
    cacheDir = "$HOME/singularity"
    runOptions = '--containall --no-home'
}

//Use personal conda environments on cybertron if conda_enabled = true
conda {
    cacheDir = "$HOME/miniconda3/envs/"
}

//Configs for docker containers on local macbook with 64Gb memory
docker {
    temp = 'auto'
    runOptions = "--platform linux/amd64 --memory=32g --cpus=0.000"
}

//overwrite reports when the workflow is executed again 
report {
    overwrite = true
}